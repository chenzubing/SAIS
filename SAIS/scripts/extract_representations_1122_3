import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import h5py
from pathlib import Path
import numpy as np
from tqdm import tqdm
import cv2 as cv
import os
import gc
import sys
import traceback

def setup_gpu():
    """设置GPU并限制内存使用"""
    if torch.cuda.is_available():
        # 设置cudnn为确定性模式
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False
        
        # 限制GPU内存使用
        torch.cuda.empty_cache()
        for i in range(torch.cuda.device_count()):
            torch.cuda.set_per_process_memory_fraction(0.3, i)  # 只使用30%的GPU内存
            
        device = torch.device('cuda')
        print(f"Found {torch.cuda.device_count()} CUDA device(s)")
        print(f"Using device: {device}")
        
        # 打印GPU信息
        for i in range(torch.cuda.device_count()):
            print(f"CUDA Device {i}: {torch.cuda.get_device_name(i)}")
            print(f"Memory Usage:")
            print(f"  Allocated: {torch.cuda.memory_allocated(i)/1024**2:.1f}MB")
            print(f"  Cached: {torch.cuda.memory_reserved(i)/1024**2:.1f}MB")
    else:
        print("Warning: CUDA is not available. Using CPU instead.")
        device = torch.device('cpu')
    
    return device

def load_dino_model(device):
    """加载预训练的DINO ViT模型"""
    try:
        print("\nLoading DINO model...")
        model = torch.hub.load('facebookresearch/dino:main', 'dino_vits16')
        if not isinstance(model, nn.Module):
            raise ValueError("Failed to load DINO model")
            
        model.eval()
        model = model.to(device)
        print("DINO model loaded successfully")
        return model
        
    except Exception as e:
        print(f"Error loading DINO model: {str(e)}")
        traceback.print_exc()
        return None

def extract_features(model, image_path, transform, device, batch_size=2):
    """提取单张图像的特征"""
    if model is None:
        return None
        
    try:
        # 使用PIL读取图像
        with Image.open(image_path) as img:
            img = img.convert('RGB')
            img = transform(img).unsqueeze(0)
            
        # 移动到设备并提取特征
        img = img.to(device)
        with torch.no_grad():
            feat = model(img)
            feat = feat.cpu().numpy()
            
        # 清理内存
        del img
        torch.cuda.empty_cache()
        gc.collect()
        
        return feat
        
    except Exception as e:
        print(f"Error extracting features from {image_path}: {str(e)}")
        traceback.print_exc()
        return None

def process_video(model, video_dir, transform, device, batch_size=2):
    """处理单个视频目录的所有帧"""
    try:
        frame_paths = sorted(list(video_dir.glob('frame_*.jpg')))
        if not frame_paths:
            print(f"Warning: No frames found in {video_dir}")
            return None
            
        features = []
        
        # 分批处理帧
        for i in range(0, len(frame_paths), batch_size):
            try:
                batch_paths = frame_paths[i:i + batch_size]
                batch_features = []
                
                for frame_path in batch_paths:
                    # 提取特征
                    feat = extract_features(model, frame_path, transform, device)
                    if feat is not None:
                        batch_features.append(feat)
                    
                    # 立即清理内存
                    gc.collect()
                    if torch.cuda.is_available():
                        torch.cuda.empty_cache()
                
                # 处理批次结果
                if batch_features:
                    features.extend(batch_features)
                
                # 清理批次内存
                del batch_features
                gc.collect()
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                    
            except Exception as e:
                print(f"Error processing batch starting at frame {i}: {str(e)}")
                traceback.print_exc()
                continue
        
        if not features:
            return None
            
        # 将所有特征堆叠成一个数组
        features = np.stack(features)
        return features
        
    except Exception as e:
        print(f"Error processing video directory {video_dir}: {str(e)}")
        traceback.print_exc()
        return None

def main():
    try:
        # 设置GPU
        device = setup_gpu()
        
        # 设置转换
        transform = transforms.Compose([
            transforms.Resize(224),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),
        ])
        
        # 加载DINO模型
        model = load_dino_model(device)
        if model is None:
            print("Failed to load model. Exiting...")
            return
            
        # 设置路径
        root_path = '/root/SAIS/mock_VUA'
        videos_path = Path(root_path) / 'Images'
        output_path = Path(root_path) / 'Results'
        
        if not videos_path.exists():
            raise FileNotFoundError(f"Videos directory not found at {videos_path}")
            
        print(f"Processing videos from: {videos_path}")
        print(f"Saving results to: {output_path}")
        
        # 确保输出目录存在
        os.makedirs(output_path, exist_ok=True)
        
        # 创建输出文件
        output_file = output_path / 'ViT_SelfSupervised_ImageNet_RepsAndLabels.h5'
        
        # 如果文件已存在，先删除
        if output_file.exists():
            output_file.unlink()
        
        # 处理视频
        with h5py.File(output_file, 'w') as f:
            video_dirs = sorted([d for d in videos_path.iterdir() if d.is_dir()])
            print(f"Found {len(video_dirs)} video directories")
            
            for video_dir in tqdm(video_dirs):
                print(f"\nProcessing video: {video_dir.name}")
                
                try:
                    # 清理内存
                    gc.collect()
                    if torch.cuda.is_available():
                        torch.cuda.empty_cache()
                    
                    # 处理视频
                    features = process_video(model, video_dir, transform, device)
                    
                    # 保存特征
                    if features is not None:
                        try:
                            f.create_dataset(video_dir.name, data=features)
                            print(f"Features shape: {features.shape}")
                        except Exception as e:
                            print(f"Error saving features for {video_dir.name}: {str(e)}")
                            traceback.print_exc()
                    
                    # 清理内存
                    del features
                    gc.collect()
                    if torch.cuda.is_available():
                        torch.cuda.empty_cache()
                        
                except Exception as e:
                    print(f"Error processing directory {video_dir}: {str(e)}")
                    traceback.print_exc()
                    continue
                    
    except Exception as e:
        print(f"Fatal error during processing: {str(e)}")
        traceback.print_exc()
        
    finally:
        # 最终清理
        gc.collect()
        if torch.cuda.is_available():
            torch.cuda.empty_cache()

if __name__ == '__main__':
    main()